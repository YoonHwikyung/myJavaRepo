package com.kh.chap04_field.model.vo; // 필드 테스트 1 : 변수 선언 위치에 따른 구분 (전역, 지역, 매개)

/*
 * 클래스 == "필드" + 생성자 + 메소드 의 조합
 * 
 * >> 변수 작성 위치에 따른 구분
 * -전역변수 : 클래스 영역에 바로 선언하는 변수 => 클래스 내에서면 어디서든 사용 가능
 * -지역변수 : 클래스 영역 내 어떤 특정한 구역({})에 선언하는 변수 => 그 지역에서만 사용 가능
 * 			특정 구역 == 메소드 영역, 제어문(if,for..) 영역 등
 * 
 * 1. 전역변수
 * - 멤버변수  (== 인스턴스 변수)
 *   생성 시점 : new 연산자를 통해서 해당 객체 생성시 => 메모리 상에 만들어짐
 *   소멸 시점 : 해당 객체 소멸시 같이 소멸
 *   
 * - 클래스변수 (== static 변수) : static이라는 예약어 붙은 변수
 *   생성 시점 : 프로그램 실행(해당 객체 생성이 되지 않아도)과 동시에 무조건 메모리상(static영역)에 만들어짐
 *   소멸 시점 : 프로그램이 종료될 떄 소멸
 * 
 * 2. 지역변수
 *    생성 시점 : 이 지역변수가 속해 있는 특정 구역({})이 실행(호출)시 메모리 상에 만들어짐 (ex 메소드 실행(호출)시)
 *    소멸 시점 : 해당 특정 구역({}) 종료시 소멸 (ex 메소드 종료시)
 * 
 
 */

// 이 클래스에서는 많이 접해본
// 전역변수 중 멤버변수, 지역변수가
// 언제 생성되고 소멸되는지 공부해보자!
   
// 학습 목표 : 변수 선언 위치에 따른 구분을 보기 위한 클래스 (전역, 지역, 매개)
public class FieldTest1 {
	
	// 클래스 영역 내에 선언한 변수
	// 전역변수(멤버변수==인스턴스변수==필드)
	private int global;
	
	
	// 클래스 내엑 메소드 영역 잡아보자
	// 매개변수가 있는 메소드
	public void test(int num) {
		// 매개변수 (메소드 호출시 전달되는 값을 담기위한 변수) == 지역변수
		
		// 이 구역 안에 선언한 변수 == 지역변수 => 지역변수에는 접근제한자 붙이는 거 아님!
		int local = 10; // 선언과 동시에 초기화 하는 습관이 필요하다!
		
		// 멤버변수 출력
		// JVM이 기본값으로 초기화 해줌
		System.out.println(global); // 0 출력
		
		// 지역변수 출력
		// 내가 직접 값을 초기화 해줘야 함
		System.out.println(local); // 10 출력
		// int local; 이었을 시 오류 : stack영역에 있는 지역변수에는 아무것도 담겨있지 않아서 오류가 난다.
		
		// 매개변수 출력
		// 이 메소드 호출시 전달값이 초기화 됨
		System.out.println(num); // 5 출력
	}
	
	// FieldTest1 클래스를 통해 알 수 있었던 점
	// 멤버변수, 지역변수의 개념
	// 멤버변수, 지역변수(+매개변수)의 생성시점과 소멸시점
	// 지역변수는 내가 직접 값을 초기화 해줘야 함(stack 영역에 생성되기 때문)

	// FieldTest2 에서는 4가지 종류의 접근제한자에 대해 공부해보자!

}
